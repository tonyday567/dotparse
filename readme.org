#+TITLE: dotparse

[[https://hackage.haskell.org/package/chart-svg][file:https://img.shields.io/hackage/v/dotparse.svg]] [[https://github.com/tonyday567/chart-svg/actions?query=workflow%3Ahaskell-ci][file:https://github.com/tonyday567/dotparse/workflows/haskell-ci/badge.svg]]

Parsing and printing for the dot language of graphviz.

- A close rendition of the [[http://www.graphviz.org/doc/info/lang.html][dot language specification]]
- Supports inexact printing . parsing round trip; forgetting comments, separator choice and whitespace.
- Treats attribute keys and values as ByteStrings. No Type safety of Attributes is attempted.
- Uses command-line graphviz programs `dot` and `neato` to augment dot graph specifications
- Supports conversion from and to [[https://hackage.haskell.org/package/algebraic-graphs][algebraic-graphs]].
- Support rendering dot graphs using [[https://hackage.haskell.org/package/chart-svg][chart-svg]].
- Uses [[https://hackage.haskell.org/package/flatparse][flatparse]] for speedy parsing.

** Reference

Graphviz documentation:

[[https://www.graphviz.org/][Graphviz]]
[[http://magjac.com/graphviz-visual-editor/][Graphviz Visual Editor]]
[[http://www.graphviz.org/doc/info/attrs.html][Attributes | Graphviz]]
[[http://www.graphviz.org/pdf/dot.1.pdf]]

Graphviz practical examples:

https://renenyffenegger.ch/notes/tools/Graphviz/examples/index
https://renenyffenegger.ch/notes/tools/Graphviz/attributes/label/HTML-like/index

** Similar projects

The [[https://hackage.haskell.org/package/graphviz][graphviz]] library aims for comprehensive typing of graphviz attributes and syntax. As a result, it is quite large and somewhat incomplete. In contrast, dotparse parsing is simpler, more robust and faster. It is also somewhat tied to fgl and I wanted to try a different graph library.

[[https://hackage.haskell.org/package/dotgen][dotgen]] is a dot graph printer but not a parser. It supports a monadic style of printing. Specifically, it supports generation of unique names if that is an important feature of the problem domain.

** development wish list

Target [[https://hackage.haskell.org/package/calligraphy][calligraphy]] for enhanced source code visualization.

Broaden support to include fgl and containers.

Support parsing of library graphs from cabal.

Explore [[https://kowainik.github.io/posts/2019-01-14-tomland#tagged-partial-bidirectional-isomorphism][tagged partial birectional isomorphism]] style.

Steal design ideas from [[https://hackage.haskell.org/package/jordan][jordan]].

Case-insensitive parsing blocked on [[https://github.com/AndrasKovacs/flatparse/issues/10][AndrasKovacs/flatparse#10 Case-insensitive keyword matching]].

Exact printing of comments and whitespace.

* Development

#+begin_src haskell :results output
:reload
:set prompt "> "
:set -XOverloadedLabels
:set -XOverloadedStrings
import Chart
import Optics.Core
import FlatParse.Basic
import qualified Data.ByteString as BS
import GHC.Exts
import DotParse.Examples
import DotParse.Examples.NumHask
#+end_src

#+RESULTS:
: Ok, 14 modules loaded.
: >

** write examples

  #+begin_src haskell
writeAllExamples
  #+end_src

#+RESULTS:
: ok
